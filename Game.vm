function Game.new 0
push constant 8
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 3
push this 3
push this 3
call Math.multiply 2
call Array.new 1
pop this 4
push constant 40
pop this 0
push constant 5
pop this 1
push this 3
push this 0
call Math.multiply 2
push this 3
push constant 1
add
push this 1
call Math.multiply 2
add
pop this 2
push constant 0
pop static 0
push constant 1
pop static 1
push constant 2
pop static 2
push constant 3
pop static 3
push constant 4
pop static 4
push constant 5
pop static 5
push pointer 0
return
function Game.ended 0
push argument 0
pop pointer 0
push constant 0
return
function Game.isInBoard 0
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
not
push argument 1
push this 3
lt
and
push argument 2
push constant 0
lt
not
and
push argument 2
push this 3
lt
and
return
function Game.move 7
push argument 0
pop pointer 0
push this 5
push argument 1
add
pop local 0
push this 6
push argument 2
add
pop local 1
push constant 0
pop local 4
push constant 0
pop local 5
push constant 0
pop local 6
label WHILE_EXP0
push local 6
not
push pointer 0
push local 0
push local 1
call Game.isInBoard 3
and
not
if-goto WHILE_END0
push local 0
push this 3
call Math.multiply 2
push local 1
add
push this 4
add
pop pointer 1
push that 0
push static 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push constant 1
add
pop local 4
label IF_FALSE0
push local 0
push this 3
call Math.multiply 2
push local 1
add
push this 4
add
pop pointer 1
push that 0
push static 4
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop local 6
push local 0
pop local 2
push local 1
pop local 3
label IF_FALSE1
push local 0
push argument 1
add
pop local 0
push local 1
push argument 2
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 6
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
return
label IF_FALSE2
push constant 0
return
function Game.init 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
push this 3
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 0
push this 4
add
push static 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push this 3
lt
not
if-goto WHILE_END1
push this 3
push this 3
call Math.multiply 2
call Random.next 1
pop local 1
label WHILE_EXP2
push local 1
push this 4
add
pop pointer 1
push that 0
push static 0
eq
not
not
if-goto WHILE_END2
push this 3
push this 3
call Math.multiply 2
call Random.next 1
pop local 1
goto WHILE_EXP2
label WHILE_END2
push local 1
push this 4
add
push static 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push this 3
push this 3
call Math.multiply 2
call Random.next 1
pop local 1
label WHILE_EXP3
push local 1
push this 4
add
pop pointer 1
push that 0
push static 0
eq
not
not
if-goto WHILE_END3
push this 3
push this 3
call Math.multiply 2
call Random.next 1
pop local 1
goto WHILE_EXP3
label WHILE_END3
push local 1
push this 4
add
push static 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push this 3
call Math.divide 2
pop this 5
push local 1
push this 5
push this 3
call Math.multiply 2
sub
pop this 6
push constant 0
pop this 7
push constant 0
return
function Game.draw 3
push argument 0
pop pointer 0
call Screen.clearScreen 0
pop temp 0
push constant 0
push constant 0
push this 2
push constant 0
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 0
push constant 0
push this 2
call Screen.drawLine 4
pop temp 0
push this 2
push constant 0
push this 2
push this 2
call Screen.drawLine 4
pop temp 0
push constant 0
push this 2
push this 2
push this 2
call Screen.drawLine 4
pop temp 0
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push this 3
push this 3
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 2
push this 3
call Math.divide 2
pop local 0
push local 2
push local 0
push this 3
call Math.multiply 2
sub
pop local 1
push local 0
push this 0
push this 1
add
call Math.multiply 2
push this 1
add
pop local 0
push local 1
push this 0
push this 1
add
call Math.multiply 2
push this 1
add
pop local 1
push local 2
push this 4
add
pop pointer 1
push that 0
push local 0
push local 1
push this 0
call Game.drawCell 4
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Game.dispose 0
push argument 0
pop pointer 0
push this 4
call Array.dispose 1
pop temp 0
push constant 0
return
function Game.drawCell 2
push argument 3
push constant 2
call Math.divide 2
pop local 0
push constant 2
pop local 1
push argument 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push argument 2
push argument 1
push argument 3
add
push argument 2
push argument 3
add
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE0
push argument 0
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push local 0
call Screen.drawCircle 3
pop temp 0
label IF_FALSE1
push argument 0
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push local 0
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push local 0
push local 1
sub
call Screen.drawCircle 3
pop temp 0
label IF_FALSE2
push argument 0
push constant 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push local 1
call Screen.drawCircle 3
pop temp 0
label IF_FALSE3
push argument 0
push constant 4
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push argument 2
push argument 1
push argument 3
add
push argument 2
push argument 3
add
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE4
push argument 0
push constant 5
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push argument 2
push argument 1
push argument 3
add
push argument 2
push argument 3
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push local 1
add
push argument 2
push local 1
add
push argument 1
push argument 3
add
push local 1
sub
push argument 2
push argument 3
add
push local 1
sub
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push argument 2
push argument 1
push argument 3
add
push argument 2
push argument 3
add
call Screen.drawLine 4
pop temp 0
push argument 1
push argument 3
add
push argument 2
push argument 1
push argument 2
push argument 3
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE5
push constant 0
return
